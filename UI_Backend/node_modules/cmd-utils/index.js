var pipe = require('ramda/src/pipe')
var path = require('ramda/src/path')
var not = require('ramda/src/not')
var equals = require('ramda/src/equals')
var prop = require('ramda/src/prop')
var curryN = require('ramda/src/curryN')
var map = require('ramda/src/map')
var flip = require('ramda/src/flip')
var apply = require('ramda/src/apply')
var contains = require('ramda/src/contains')
var head = require('ramda/src/head')
var or = require('ramda/src/or')
var filter = require('ramda/src/filter')
var keys = require('ramda/src/keys')
var is = require('ramda/src/is')

var asArray = require('as-array')

var getAlias = exports.getAlias = path(['value', 'alias'])
var valueDoesNotHaveAlias = exports.valueDoesNotHaveAlias = pipe(getAlias, not)
var isCommand = exports.isCommand = pipe(prop('type'), equals('command'))
var isFlag = exports.isFlag = pipe(prop('type'), equals('flag'))

var applyFunctions = exports.applyFunctions = curryN(3, function applyFunctions (data, flags, context) {

  var computedArgs = is(Function, context.args)
    ? context.args(data, flags)
    : context.args;

  var args = asArray(computedArgs).concat({
    data: data,
    flags: flags,
    options: context.options
  })

  return pipe(
    path(['value', 'handler']),
    map(flip(apply)(args))
  )(context)
})

var containsAlias = exports.containsAlias = function containsAlias (data, def) {

  return pipe(
    getAlias,
    flip(or)([]),
    contains(head(data))
  )(def)
}

var matchAlias = exports.matchAlias = curryN(2, function matchAlias (data, def) {

  return or(valueDoesNotHaveAlias(def), containsAlias(data, def))
})

exports.getCommands = function getCommands (data) {

  return pipe(
    filter(isCommand),
    filter(matchAlias(data))
  )
}

exports.getFlags = function getFlags (flags) {

  var matchFlagAliases = pipe(
    keys,
    matchAlias
  )

  return pipe(
    filter(isFlag),
    filter(matchFlagAliases(flags)) // TODO: need to format flags input
  )
}
